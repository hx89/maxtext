#!/bin/bash
#SBATCH -A coreai_dlalgo_llm
#SBATCH -p batch      # backfill / luna
#SBATCH -N 8                    # number of nodes
#SBATCH -t 00:17:00              # wall time  (8 for backfill, 4 for Luna)
#SBATCH -J "coreai_dlalgo_llm-maxtext.perf_runs"     # job name (<< CHANGE ! >>)
#SBATCH --exclusive             # exclusive node access
#SBATCH --mem=0                 # all mem avail
#SBATCH --mail-type=FAIL        # only send email on failure
#SBATCH --overcommit            # Needed for pytorch
#SBATCH --ntasks-per-node=8    
#SBATCH --gres=gpu:8 
set -x

# CONTAINER=ghcr.io/nvidia/jax:base-2024-12-09
# CONTAINER=ghcr.io/nvidia/jax:maxtext-2025-01-07
# CONTAINER=ghcr.io/nvidia/jax:maxtext-2024-12-09
# CONTAINER=ghcr.io/nvidia/jax:maxtext-2025-01-12
# CONTAINER=ghcr.io/nvidia/jax:maxtext-2025-02-13
# CONTAINER=gitlab-master.nvidia.com/haixinl/container_repo/maxtext:2025_2_14_debug
# CONTAINER=ghcr.io/nvidia/jax:maxtext-2025-02-17
# CONTAINER=gitlab-master.nvidia.com/haixinl/container_repo/maxtext:2025_2_18_pp_fix
# CONTAINER=gitlab-master.nvidia.com/haixinl/container_repo/maxtext:2025_2_18_pp_fix_debug
CONTAINER=ghcr.io/nvidia/jax:maxtext-2025-03-04
# CONTAINER="gitlab-master.nvidia.com/dl/dgx/jax:jax|maxtext-2025-02-09"

# << CHANGE ! >>
BASE_WORKSPACE_DIR="/lustre/fsw/portfolios/coreai/users/haixinl/maxtext_workspace/pipeline"
BASE_VOCAB_PATH="/lustre/fsw/portfolios/coreai/users/haixinl/dataset/google_c4_spm"

# Default env variables for paths required by pax training scripts
WORKSPACE_DIR=/opt/workspace
TFDS_DATA_DIR=/opt/datasets/
GPT_VOCAB_PATH=/opt/vocab

# init the variables
TAG=""
NODES=""
TP=""
DP=""
PP=""
VP=""
MBS=""
AR_MULTIPLE=""
AG_MULTIPLE=""
RS_MULTIPLE=""
MEM_FRACTION=""
POLICY=""
QUANTIZATION=""

for arg in "$@"; do
  case "$arg" in
    TAG=*)
      TAG="${arg#*=}"
      ;;
    N=*)
      NODES="${arg#*=}"
      ;;
    TP=*)
      TP="${arg#*=}"
      ;;
    DP=*)
      DP="${arg#*=}"
      ;;
    PP=*)
      PP="${arg#*=}"
      ;;
    VP=*)
      VP="${arg#*=}"
      ;;
    B=*)
      MBS="${arg#*=}"
      ;;
    AR=*)
      AR_MULTIPLE="${arg#*=}"
      ;;
    AG=*)
      AG_MULTIPLE="${arg#*=}"
      ;;
    RS=*)
      RS_MULTIPLE="${arg#*=}"
      ;;
    MEM=*)
      MEM_FRACTION="${arg#*=}"
      ;;
    P=*)
      POLICY="${arg#*=}"
      ;;
    Q=*)
      QUANTIZATION="${arg#*=}"
      ;;
    *)
      echo "Unknown argument: $arg"
      ;;
  esac
done

TAG="${TAG:-l70}"
NODES="${NODES:-8}"
TP="${TP:-1}"
DP="${DP:-1}"
PP="${PP:-1}"
VP="${VP:-1}"
MBS="${MBS:-2}"
AR_MULTIPLE="${AR_MULTIPLE:-1}"
AG_MULTIPLE="${AG_MULTIPLE:-1}"
RS_MULTIPLE="${RS_MULTIPLE:-1}"
MEM_FRACTION="${MEM_FRACTION:-0.90}"
POLICY="${POLICY:-save_qkv_proj}"
QUANTIZATION="${QUANTIZATION:-""}"

if [ $DP -gt 1 ]; then 
    ici_TP=$TP
    ici_FSDP=$((8/TP))
    dcn_DP=$DP
    ici_DP=1
    dcn_FSDP=$((NODES/(PP*DP)))
else
    dcn_DP=1
    ici_DP=1
    ici_TP=$TP
    # ici_FSDP=$((8/TP))
    ici_FSDP=1
    # dcn_FSDP=$((NODES/PP))
    dcn_FSDP=1
fi

RUN_NAME="${TAG}-n${NODES}-bs${MBS/./p}-tp${ici_TP}-dp${DP}-pp${PP}-vp${VP}-ar${AR_MULTIPLE}-ag${AG_MULTIPLE}-rs${RS_MULTIPLE}-m${MEM_FRACTION##*.}-${POLICY}"

MOUNTS="--container-mounts=$BASE_WORKSPACE_DIR:$WORKSPACE_DIR,$BASE_VOCAB_PATH:$GPT_VOCAB_PATH"

# Add pax/JAX specific exports
EXPORTS="--export=ALL,TFDS_DATA_DIR=${TFDS_DATA_DIR},WORKSPACE_DIR=${WORKSPACE_DIR},GPT_VOCAB_PATH=${GPT_VOCAB_PATH}"
#-------------------------------------------------------------------------------

# << INSERT SENTENCEPIECE MODEL NAME ! >>
read -r -d '' perf_cmd <<EOF
echo "*******STARTING********" \
&& cd /opt/workspace \
&& nvidia-smi \
&& bash /opt/workspace/run_single.sh ${RUN_NAME} ${NODES} ${MBS} ${ici_DP} ${dcn_DP} ${ici_FSDP} ${ici_TP} ${dcn_FSDP} ${PP} ${VP} ${AR_MULTIPLE} ${AG_MULTIPLE} ${RS_MULTIPLE} ${MEM_FRACTION} ${POLICY} ${QUANTIZATION}
EOF

# create run specific output directory for ease of analysis
mkdir -p "${BASE_WORKSPACE_DIR}/outputs/${RUN_NAME}/single-run"
mkdir -p "${BASE_WORKSPACE_DIR}/nsys_logs/${RUN_NAME}"

# redirect both stdout and stderr in the same file for ease of analysis
PERF_OUTFILE="${BASE_WORKSPACE_DIR}/outputs/${RUN_NAME}/single-run/output-%j-%n-%t.txt"

echo $perf_cmd
srun -o $PERF_OUTFILE -e $PERF_OUTFILE --container-image="$CONTAINER" $MOUNTS $EXPORTS bash -c "${perf_cmd}"

set +x